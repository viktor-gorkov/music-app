import React, { useState } from "react";
import "./App.css";
import MusicPlayer from "./MusicPlayer"; // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–ª–µ–µ—Ä–∞

function App() {
    const [darkMode, setDarkMode] = useState(false);
    const [currentPage, setCurrentPage] = useState("Login");
    const [isAuthenticated, setIsAuthenticated] = useState(false);
    const [email, setEmail] = useState("");
    const [password, setPassword] = useState("");
    const [confirmPassword, setConfirmPassword] = useState("");
    const [error, setError] = useState("");

    const API_URL = process.env.REACT_APP_API_URL;

    const validateEmail = (email) => /^[\w-]+@([\w-]+\.)+[\w-]{2,4}$/.test(email);
    const validatePassword = (password) => password.length >= 8 && /[A-Z]/.test(password) && /[0-9]/.test(password);

    const handleRegister = async () => {
        if (!validateEmail(email)) {
            setError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã");
            return;
        }
        if (!validatePassword(password)) {
            setError("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤, –æ–¥–Ω—É –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É –∏ –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É");
            return;
        }
        if (password !== confirmPassword) {
            setError("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç");
            return;
        }

        try {
            const response = await fetch(`${API_URL}/api/register`, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ email, password }),
            });
            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error || "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏");
            }
            setError("");
            setIsAuthenticated(true);
            setCurrentPage("Home");
        } catch (error) {
            setError(error.message);
        }
    };

    const handleLogin = async () => {
        if (!validateEmail(email)) {
            setError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã");
            return;
        }
        if (!password) {
            setError("–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
            return;
        }

        try {
            const response = await fetch(`${API_URL}/api/login`, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ email, password }),
            });
            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error || "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞");
            }
            setError("");
            setIsAuthenticated(true);
            setCurrentPage("Home");
        } catch (error) {
            setError(error.message);
        }
    };

    const handleLogout = () => {
        setIsAuthenticated(false);
        setCurrentPage("Login");
        setEmail("");
        setPassword("");
        setConfirmPassword("");
        setError("");
    };

    const renderContent = () => {
        if (!isAuthenticated) {
            if (currentPage === "Login") {
                return (
                    <section className="auth">
                        <h2>–í—Ö–æ–¥</h2>
                        {error && <p className="error">{error}</p>}
                        <div className="input-container">
                            <input
                                type="email"
                                placeholder="–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞"
                                value={email}
                                onChange={(e) => setEmail(e.target.value)}
                            />
                            <input
                                type="password"
                                placeholder="–ü–∞—Ä–æ–ª—å"
                                value={password}
                                onChange={(e) => setPassword(e.target.value)}
                            />
                        </div>
                        <button onClick={handleLogin} className="auth-btn">–í–æ–π—Ç–∏</button>
                        <p>
                            –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞?{" "}
                            <span onClick={() => setCurrentPage("Register")} className="link">–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</span>
                        </p>
                    </section>
                );
            }
            if (currentPage === "Register") {
                return (
                    <section className="auth">
                        <h2>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</h2>
                        {error && <p className="error">{error}</p>}
                        <div className="input-container">
                            <input
                                type="email"
                                placeholder="–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞"
                                value={email}
                                onChange={(e) => setEmail(e.target.value)}
                            />
                            <input
                                type="password"
                                placeholder="–ü–∞—Ä–æ–ª—å"
                                value={password}
                                onChange={(e) => setPassword(e.target.value)}
                            />
                            <input
                                type="password"
                                placeholder="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                                value={confirmPassword}
                                onChange={(e) => setConfirmPassword(e.target.value)}
                            />
                        </div>
                        <button onClick={handleRegister} className="auth-btn">–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</button>
                        <p>
                            –£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç?{" "}
                            <span onClick={() => setCurrentPage("Login")} className="link">–í–æ–π—Ç–∏</span>
                        </p>
                    </section>
                );
            }
        }

        switch (currentPage) {
            case "Home":
                return (
                    <section className="home">
                        <h2>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Music Stream</h2>
                        <p>–û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è –ª—é–±–∏–º—É—é –º—É–∑—ã–∫—É –∏ –ø–æ–¥–∫–∞—Å—Ç—ã.</p>
                    </section>
                );
            case "Genres":
                return (
                    <section className="genres">
                        <h2>–ñ–∞–Ω—Ä—ã</h2>
                        <p>–ò—Å—Å–ª–µ–¥—É–π—Ç–µ –º—É–∑—ã–∫—É –ø–æ –∂–∞–Ω—Ä–∞–º.</p>
                    </section>
                );
            case "My Collection":
                return (
                    <section className="collection">
                        <h2>–ú–æ—è –∫–æ–ª–ª–µ–∫—Ü–∏—è</h2>
                        <p>–í–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏, –∞–ª—å–±–æ–º—ã –∏ –ø–ª–µ–π–ª–∏—Å—Ç—ã.</p>
                    </section>
                );
            default:
                return null;
        }
    };

    return (
        <div className={darkMode ? "app dark-mode" : "app"}>
            {/* Header */}
            {isAuthenticated && (
                <header className="header">
                    <h1>Music Stream</h1>
                    <div className="search">
                        <input type="text" placeholder="–ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏ –∏–ª–∏ –ø–æ–¥–∫–∞—Å—Ç–æ–≤..." />
                    </div>
                    <button className="theme-toggle" onClick={() => setDarkMode(!darkMode)}>
                        {darkMode ? "–°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞" : "–¢–µ–º–Ω–∞—è —Ç–µ–º–∞"}
                    </button>
                    <button className="logout-btn" onClick={handleLogout}>
                        –í—ã–π—Ç–∏
                    </button>
                </header>
            )}

            {/* Sidebar */}
            {isAuthenticated && (
                <aside className="sidebar">
                    <nav>
                        <ul>
                            <li onClick={() => setCurrentPage("Home")}>üè† –ì–ª–∞–≤–Ω–∞—è</li>
                            <li onClick={() => setCurrentPage("Genres")}>üéµ –ñ–∞–Ω—Ä—ã</li>
                            <li onClick={() => setCurrentPage("My Collection")}>üìÇ –ú–æ—è –∫–æ–ª–ª–µ–∫—Ü–∏—è</li>
                        </ul>
                    </nav>
                </aside>
            )}

            {/* Main Content */}
            <main className="main-content">{renderContent()}</main>

            {/* Music Player */}
            {isAuthenticated && <MusicPlayer darkMode={darkMode} />}
        </div>
    );
}

export default App;
